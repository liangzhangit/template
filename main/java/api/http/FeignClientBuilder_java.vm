#set( $dollar = '$' )
package ${target.javaPackageFromFolder(${SRC})};

import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.ObjectFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
import org.springframework.cloud.openfeign.support.SpringDecoder;
import org.springframework.cloud.openfeign.support.SpringEncoder;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;

import feign.Contract;
import feign.Feign;
import feign.Request.Options;
import feign.Retryer;
import feign.codec.ErrorDecoder;
import feign.form.spring.SpringFormEncoder;
import feign.optionals.OptionalDecoder;

#include ( "/include/author.vm" )

@Component
public class FeignClientBuilder {

    @Value("${dollar}{feign.client.config.default.connectTimeout:90000}")
    private Integer connectTimeout;

    @Value("${dollar}{feign.client.config.default.readTimeout:300000}")
    private Integer readTimeout;

    @Autowired
    private Environment environment;

    @Autowired
    private ObjectFactory<HttpMessageConverters> messageConverters;

    private final ConcurrentHashMap<String, Object> concurrentHashMap = new ConcurrentHashMap<>();

    @SuppressWarnings("unchecked")
    public <T> T build(final Class<T> clazz) {

        final T result = (T) concurrentHashMap.get(clazz.getName());

        if (result != null) {
            return result;
        }

        final String contextPath = StringUtils.stripToEmpty(environment.getProperty("server.servlet.context-path"));
        final String port = environment.getProperty("local.server.port");
        final String url = String.format("http://localhost:%s%s", port, contextPath);

        final Options options = new Options(connectTimeout, readTimeout);

        final T client = Feign.builder()
                              .decode404()
                              .encoder(new SpringFormEncoder(new SpringEncoder(messageConverters)))
                              .decoder(new OptionalDecoder(new SpringDecoder(messageConverters)))
                              .errorDecoder(new ErrorDecoder.Default())
                              .logLevel(feign.Logger.Level.FULL)
                              .contract(new Contract.Default())
                              .retryer(Retryer.NEVER_RETRY)
                              .doNotCloseAfterDecode()
                              .options(options)
                              .target(clazz, url);

        concurrentHashMap.put(clazz.getName(), client);

        return client;
    }
}
