#parse ( "include/loader_stringutils.vm" )
#parse ( "include/loader_inflector.vm" )
package ${target.javaPackageFromFolder(${SRC})};
#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end
import java.io.Serializable;
import lombok.Getter;
import lombok.Setter;
#include ( "/include/author.vm" )
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
#set( $tableName = $entity.databaseTable  )

@Getter
@Setter
public class ${entity.name}Dto implements Serializable {

#foreach( $field in $entity.keyAttributes )

    private $field.type $field.name#if($field.hasInitialValue())= ${field.initialValue}#end;
#end
#foreach( $link in $entity.selectedLinks )
#if ($link.isCardinalityManyToOne())

#if ( $link.fieldType.contains("Enum_") )
    private $link.fieldType.replace("Enum_", "") $link.fieldName;
#else
    private ${link.fieldType} $link.fieldName;
#end
#end
#if ($link.isCardinalityOneToMany())

#if ( $link.fieldType.contains("Enum_") )
    private $link.fieldType.replace("Enum_", "") $link.fieldName;
#else
    private ${link.fieldType} $link.fieldName;
#end
#end
#end
#foreach( $field in $dataFields )

#if ( $field.type.contains("Enum_") )
    private $field.type $field.name#if($field.hasInitialValue())= ${field.initialValue}#end;
#else
    private $field.type.replace("Enum_", "") $field.name#if($field.hasInitialValue())= ${field.initialValue}#end;
#end
#end
}
