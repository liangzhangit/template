#parse ( "/include/domain_info.vm" )
#set ( $tableName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($pluralEntityName), "_").toUpperCase() ) 
package ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.domain;

#parse ( "root/dataproviders/database/src/main/java/domain/Entity_Imports_java.vm" )

#include ( "/include/author.vm" )

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "${tableName}"#if ( $domainUkKeys.size() > 0 ||  $domainIndexes.size() > 0 || $domainLinksToOne.size() > 0 || $domainEnumerators.size() > 0 ),
#if ( $domainUkKeys.size() > 0 )
       uniqueConstraints = {
#end
#end
#foreach( $field in $domainUkKeys )
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($field.databaseName), "_").toUpperCase() ) 
            @UniqueConstraint(columnNames = {"${columnName}"}, name = "UN_${tableName}_${columnName}"),
#end
#if ( $domainUkKeys.size() > 0 )
       }#if ( $domainIndexes.size() > 0 || $domainLinksToOne.size() > 0 || $domainEnumerators.size() > 0 ),#end
#end
#if ( $domainIndexes.size() > 0 || $domainLinksToOne.size() > 0 || $domainEnumerators.size() > 0 )
       indexes = {
#foreach( $field in $domainLinksToOne )
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($field.fieldName), "_").toUpperCase() )
#set ( $fieldEntityId = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($field.targetEntity.keyAttributes[0].name), "_").toUpperCase() )
            @Index(columnList = "${columnName}_${fieldEntityId}", name = "IDX_${tableName}_${columnName}_${fieldEntityId}"),
#end
#foreach( $field in $domainEnumerators )
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($field.fieldName), "_").toUpperCase() )
            @Index(columnList = "${columnName}", name = "IDX_${tableName}_${columnName}"),
#end
#foreach( $field in $domainIndexes )
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($field.name), "_").toUpperCase() )
            @Index(columnList = "${columnName}", name = "IDX_${tableName}_${columnName}"),
#end
       }
#end
)
public class ${entity.name}Entity implements Serializable {

#parse ( "include/serial_version.vm" )
#foreach( $field in $domainKeys )
#set ( $prefix = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($entity.name), "_").toUpperCase() ) 
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($field.databaseName), "_").toUpperCase() )  
    
    @Access(AccessType.PROPERTY)
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "${prefix}_${columnName}", updatable = false, insertable = false)
#if ( $field.isLongType() )
    private Long $field.name;
#else
    private $field.type $field.name;
#end
#end
#foreach( $link in $domainLinks )
#if ( $link.isCardinalityManyToOne() )
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($link.fieldName), "_").toUpperCase() )  
#set ( $fieldEntityId = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($link.targetEntity.keyAttributes[0].name), "_").toUpperCase() )

    @JoinColumn(name = "${columnName}_${fieldEntityId}", foreignKey = @ForeignKey(name = "FK_${tableName}_${columnName}_${fieldEntityId}"))
    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    private ${link.fieldType}Entity $link.fieldName;
#elseif ( $link.isCardinalityOneToMany() )

    @OneToMany(fetch = FetchType.LAZY, cascade = {CascadeType.PERSIST, CascadeType.REMOVE, CascadeType.MERGE}, orphanRemoval = true, mappedBy = "${uncapitalizeEntityName}")
    @Fetch(FetchMode.SELECT)
    @JsonBackReference
    private ${link.fieldType}Entity $link.fieldName;
#end
#end
#foreach( $link in $domainEnumerators )
#if ( $link.isCardinalityManyToOne() )
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($link.fieldName), "_").toUpperCase() )  

    @Column(name = "${columnName}", nullable = false)
    private String $link.fieldName;
#elseif ( $link.isCardinalityOneToMany() )

    private List<String> $wordUtils.capitalize($inflector.getInstance().pluralize($link.fieldName));
#end
#end
#foreach( $field in $domainAttributes )
#set ( $columnName = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($field.databaseName), "_").toUpperCase() )  

#if ( $field.isStringType() )
#if ( $strUtils.split($field.databaseComment, ", ").contains("LargeObject") )
    @Lob
    @Basic(fetch = FetchType.LAZY)
#end
#end
    @Column(name = "${columnName}"#if ( $field.isNotNull() || $field.isNotBlank() || $field.isNotEmpty() ), nullable = false#end)
#if ( $field.isLongType() )
    private Long $field.name;
#elseif ( $field.isBooleanType() )
    private Boolean $field.name;
#elseif ( $field.isDateType() )
    private LocalDate $field.name;
#elseif ( $field.isTimestampType() )
    private LocalDateTime $field.name;
#elseif ( $field.isDecimalType() )
    private BigDecimal $field.name;
#else
    private $field.type $field.name;
#end
#end

    @Override
    public int hashCode() {
        final int prime = 23;
        int result = 1;
        result = prime * result + (${uncapitalizedDomainId} == null ? 0 : ${uncapitalizedDomainId}.hashCode());
        return result;
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final ${entity.name}Entity other = (${entity.name}Entity) obj;
        if (${uncapitalizedDomainId} == null) {
            if (other.${uncapitalizedDomainId} != null) {
                return false;
            }
        } else if (!${uncapitalizedDomainId}.equals(other.${uncapitalizedDomainId})) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("${entity.name} [${uncapitalizedDomainId}=");
        builder.append(${uncapitalizedDomainId});
#foreach ( $field in $domainAttributes )
        builder.append(", ${field.name}=");
        builder.append(${field.name});
#end
        builder.append("]");
        return builder.toString();
    }
}
