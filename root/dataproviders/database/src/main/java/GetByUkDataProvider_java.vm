#parse ( "/include/domain_info.vm" )
package ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()};

#if ( $target.file.contains("IgnoreCase") )
#set ( $fieldName =  $strUtils.substringBetween($target.file, "By", "IgnoreCaseDataProvider") )
#set ( $ignoreCase = "IgnoreCase" )
#else
#set ( $fieldName = $strUtils.substringBetween($target.file, "By", "DataProvider") )
#set ( $ignoreCase = "" )
#end
#set ( $uncapitalizedFieldName =  $wordUtils.uncapitalize($fieldName) )
#set ( $fieldType = "Invalid-Type" )
#foreach ( $field in $domainAttributes)
#if ( $field.name.toLowerCase() == $fieldName.toLowerCase() )
#if ( $field.isLongType() )
#set ( $fieldType = "Long" )
#elseif ( $field.isStringType() )
#set ( $fieldType = "String" )
#elseif ( $field.isBooleanType() )
#set ( $fieldType = "Boolean" )
#elseif ( $field.isDateType() )
#set ( $fieldType = "LocalDate" )
import java.time.LocalDate;
#elseif ( $field.isTimestampType() )
#set ( $fieldType = "LocalDateTime" )
import java.time.LocalDateTime;
#elseif ( $field.isDecimalType() )
#set ( $fieldType = "BigDecimal" )
import java.math.BigDecimal;
#end
#end
#end
import java.util.Optional;

import org.mapstruct.factory.Mappers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
#if ( $domainLinksToOne.size() > 0 )

import com.cosium.spring.data.jpa.entity.graph.domain.EntityGraph;
import com.cosium.spring.data.jpa.entity.graph.domain.EntityGraphUtils;
#end

import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.domain.${entity.name};
import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.gateway.Get${entity.name}By${fieldName}${ignoreCase}Gateway;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.domain.${entity.name}Entity;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.mapper.${entity.name}Mapper;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.repository.${entity.name}Repository;

#include ( "/include/author.vm" )

@Transactional(readOnly = true)
@Service
public class Get${entity.name}By${fieldName}${ignoreCase}DataProvider implements Get${entity.name}By${fieldName}${ignoreCase}Gateway {

    private final ${entity.name}Mapper ${uncapitalizeEntityName}Mapper = Mappers.getMapper(${entity.name}Mapper.class);

    @Autowired
    ${entity.name}Repository ${uncapitalizeEntityName}Repository;

    @Override
    public Optional<${entity.name}> execute(final ${fieldType} ${uncapitalizedFieldName}) {
#if ( $domainLinksToOne.size() > 0 )
        final EntityGraph entityGraph = EntityGraphUtils.fromAttributePaths(#foreach( $link in $domainLinksToOne )"${link.fieldName}"#if( $foreach.hasNext ), #end#end);
        final Optional<${entity.name}Entity> optional = ${uncapitalizeEntityName}Repository.findBy${fieldName}${ignoreCase}(${uncapitalizedFieldName}, entityGraph);
#else
        final Optional<${entity.name}Entity> optional = ${uncapitalizeEntityName}Repository.findBy${fieldName}${ignoreCase}(${uncapitalizedFieldName});
#end
        return optional.map(${uncapitalizeEntityName}Mapper::of);
    }
}
