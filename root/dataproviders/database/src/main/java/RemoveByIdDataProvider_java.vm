#parse ( "/include/domain_info.vm" )
package ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()};

import java.util.Optional;

import org.mapstruct.factory.Mappers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
#if ( $domainLinksToOne.size() > 0  && ( $domainEnumerators.size() > 0 || $domainStrings.size() > 0 || $domainBooleans.size() > 0 ) )

import com.cosium.spring.data.jpa.entity.graph.domain.EntityGraph;
import com.cosium.spring.data.jpa.entity.graph.domain.EntityGraphUtils;

#end
import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.domain.${entity.name};
import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.gateway.Remove${entity.name}By${domainId}Gateway;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.domain.${entity.name}Entity;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.mapper.${entity.name}Mapper;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.repository.${entity.name}Repository;

#include ( "/include/author.vm" )

@Transactional
@Service
public class Remove${entity.name}By${domainId}DataProvider implements Remove${entity.name}By${domainId}Gateway {

    private final ${entity.name}Mapper ${uncapitalizeEntityName}Mapper = Mappers.getMapper(${entity.name}Mapper.class);
    
    @Autowired
    ${entity.name}Repository ${uncapitalizeEntityName}Repository;

    @Override
    public Optional<${entity.name}> execute(final Long ${uncapitalizedDomainId}) {

#if ( $domainLinksToOne.size() > 0 ) 
        final EntityGraph entityGraph = EntityGraphUtils.fromAttributePaths(#foreach( $link in $domainLinksToOne )"${link.fieldName}"#if( $foreach.hasNext ), #end#end);
        final Optional<${entity.name}Entity> optional = ${uncapitalizeEntityName}Repository.findBy${domainId}(${uncapitalizedDomainId}, entityGraph);
#else
        final Optional<${entity.name}Entity> optional = ${uncapitalizeEntityName}Repository.findBy${domainId}(${uncapitalizedDomainId});
#end

        return optional.map(this::remove${entity.name}Entity);
    }

    private ${entity.name} remove${entity.name}Entity(final ${entity.name}Entity ${uncapitalizeEntityName}Entity) {
        final ${entity.name} ${uncapitalizeEntityName} = ${uncapitalizeEntityName}Mapper.of(${uncapitalizeEntityName}Entity);
        ${uncapitalizeEntityName}Repository.delete(${uncapitalizeEntityName}Entity);
        return ${uncapitalizeEntityName};
    }
}
