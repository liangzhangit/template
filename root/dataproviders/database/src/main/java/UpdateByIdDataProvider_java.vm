#parse ( "/include/domain_info.vm" )
package ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()};

import java.util.Optional;

import org.mapstruct.factory.Mappers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
#if ( $domainLinksToOne.size() > 0  && ( $domainEnumerators.size() > 0 || $domainStrings.size() > 0 || $domainBooleans.size() > 0 ) )

import com.cosium.spring.data.jpa.entity.graph.domain.EntityGraph;
import com.cosium.spring.data.jpa.entity.graph.domain.EntityGraphUtils;

#end
import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.domain.${entity.name};
import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.gateway.Update${entity.name}By${domainId}Gateway;
#foreach ( $field in $domainLinks )
import ${ROOT_PKG}.dataprovider.${field.fieldType.toLowerCase()}.repository.${field.fieldType}Repository;
#end
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.domain.${entity.name}Entity;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.mapper.${entity.name}Mapper;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.repository.${entity.name}Repository;

#include ( "/include/author.vm" )

@Transactional
@Service
public class Update${entity.name}By${domainId}DataProvider implements Update${entity.name}By${domainId}Gateway {

    private final ${entity.name}Mapper ${uncapitalizeEntityName}Mapper = Mappers.getMapper(${entity.name}Mapper.class);

    @Autowired
    ${entity.name}Repository ${uncapitalizeEntityName}Repository;
#foreach ( $field in $domainLinks )
#set ( $uncapitalizeFieldType = $wordUtils.uncapitalize($field.fieldType) )

    @Autowired
    ${field.fieldType}Repository ${uncapitalizeFieldType}Repository;
#end

    @Override
    public Optional<${entity.name}> execute(final ${entity.name} ${uncapitalizeEntityName}) {

#if ( $domainLinksToOne.size() > 0 ) 
        final EntityGraph entityGraph = EntityGraphUtils.fromAttributePaths(#foreach( $link in $domainLinksToOne )"${link.fieldName}"#if( $foreach.hasNext ), #end#end);
        final Optional<${entity.name}Entity> optional = ${uncapitalizeEntityName}Repository.findBy${domainId}(${uncapitalizeEntityName}.get${domainId}(), entityGraph);
#else
        final Optional<${entity.name}Entity> optional = ${uncapitalizeEntityName}Repository.findBy${domainId}(${uncapitalizeEntityName}.get${domainId}());
#end

        return optional.map(${uncapitalizeEntityName}Entity -> update${entity.name}Entity(${uncapitalizeEntityName}Entity, ${uncapitalizeEntityName}));
    }

    private ${entity.name} update${entity.name}Entity(final ${entity.name}Entity ${uncapitalizeEntityName}Entity, final ${entity.name} ${uncapitalizeEntityName}) {
#foreach ( $field in $domainLinks )
        update${field.fieldType}Entity(${uncapitalizeEntityName}, ${uncapitalizeEntityName}Entity);
#end
#foreach ( $field in $domainAttributes )
#if ( !$strUtils.split($field.databaseComment, ", ").contains("CurrentDateTimeOnCreation") )
#set ( $capitalizeFieldName =  $wordUtils.capitalize(${field.name}) )
        ${uncapitalizeEntityName}Entity.set${capitalizeFieldName}(${uncapitalizeEntityName}.get${capitalizeFieldName}());
#end
#end
#foreach ( $field in $domainEnumerators )
#set ( $capitalizeFieldName =  $wordUtils.capitalize(${field.fieldName}) )
        ${uncapitalizeEntityName}Entity.set${capitalizeFieldName}(${uncapitalizeEntityName}.get${capitalizeFieldName}().name());
#end
        return ${uncapitalizeEntityName}Mapper.of(${uncapitalizeEntityName}Repository.saveAndFlush(${uncapitalizeEntityName}Entity));
    }
#foreach ( $field in $domainLinksToOne )
#set ( $capitalizeFieldName = $wordUtils.capitalize($field.fieldName) )
#set ( $uncapitalizeFieldType = $wordUtils.uncapitalize($field.fieldType) )
#set ( $fieldEntityId = $wordUtils.capitalize($field.targetEntity.keyAttributes[0].name) )

    private void update${field.fieldType}Entity(final ${entity.name} ${uncapitalizeEntityName}, final ${entity.name}Entity ${uncapitalizeEntityName}Entity) {
        final Long current${field.fieldType}${fieldEntityId} = ${uncapitalizeEntityName}Entity.get${capitalizeFieldName}().get${fieldEntityId}();
        final Long new${field.fieldType}${fieldEntityId} = ${uncapitalizeEntityName}.get${capitalizeFieldName}().get${fieldEntityId}();
        if (!new${field.fieldType}${fieldEntityId}.equals(current${field.fieldType}${fieldEntityId})) {
#set ( $fieldGraphs = [] )
#foreach( $link in $field.targetEntity.selectedLinks )
#if ( !$link.fieldType.contains("Enum_") )
#if ( $link.isCardinalityManyToOne() || $field.isCardinalityOneToOne() )
#set ( $x = $fieldGraphs.add($link) )
#end
#end
#end
#if ( $fieldGraphs.size() > 0 ) 
            final EntityGraph entityGraph = EntityGraphUtils.fromAttributePaths(#foreach( $link in $fieldGraphs )"${link.fieldName}"#if( $foreach.hasNext ), #end#end);
            ${uncapitalizeFieldType}Repository.findBy${fieldEntityId}(new${field.fieldType}${fieldEntityId}, entityGraph).ifPresent(${uncapitalizeEntityName}Entity::set${field.fieldType});
#else
            ${uncapitalizeFieldType}Repository.findBy${fieldEntityId}(new${field.fieldType}${fieldEntityId}).ifPresent(${uncapitalizeEntityName}Entity::set${capitalizeFieldName});
#end
        }
    }
#end
}
