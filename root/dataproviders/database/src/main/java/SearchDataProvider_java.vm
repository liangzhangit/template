#parse ( "/include/domain_info.vm" )
package ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()};

import org.apache.commons.lang3.StringUtils;
import org.mapstruct.factory.Mappers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

#if ( $domainLinksToOne.size() > 0 )
import com.cosium.spring.data.jpa.entity.graph.domain.EntityGraph;
import com.cosium.spring.data.jpa.entity.graph.domain.EntityGraphUtils;
#end
import com.querydsl.core.BooleanBuilder;

import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.domain.${entity.name};
import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.gateway.Search${pluralEntityName}Gateway;
import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.usecase.parameter.Search${pluralEntityName}Parameters;
import ${ROOT_PKG}.core.common.paging.Page;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.domain.${entity.name}Entity;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.domain.Q${entity.name}Entity;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.mapper.${entity.name}Mapper;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.repository.${entity.name}Repository;
import ${ROOT_PKG}.dataprovider.${entity.name.toLowerCase()}.repository.Search${pluralEntityName}PredicateBuilder;
import ${ROOT_PKG}.dataprovider.common.PageMapper;
import ${ROOT_PKG}.dataprovider.common.PageRequestHelper;

#include ( "/include/author.vm" )

@Transactional(readOnly = true)
@Service
public class Search${pluralEntityName}DataProvider implements Search${pluralEntityName}Gateway {
    
    private final ${entity.name}Mapper ${wordUtils.uncapitalize($entity.name)}Mapper = Mappers.getMapper(${entity.name}Mapper.class);
    private final PageMapper<${entity.name}, ${entity.name}Entity> pageMapper = new PageMapper<>() {};

    @Autowired
    ${entity.name}Repository ${wordUtils.uncapitalize($entity.name)}Repository;

    @Override
    public Page<${entity.name}> execute(final Search${pluralEntityName}Parameters parameters, final Integer pageNumber, final Integer size, final String orderBy) {

        final PageRequest pageRequest = PageRequestHelper.buildPageRequest(pageNumber, size, sanitizeOrderBy(orderBy));
        final BooleanBuilder predicate = new Search${pluralEntityName}PredicateBuilder(Q${entity.name}Entity.${wordUtils.uncapitalize($entity.name)}Entity).buildBooleanBuilder(parameters);
#if ( $domainLinksToOne.size() > 0 ) 
        final EntityGraph entityGraph = EntityGraphUtils.fromAttributePaths(#foreach( $link in $domainLinksToOne )"${link.fieldName}"#if( $foreach.hasNext ), #end#end);
        final org.springframework.data.domain.Page<${entity.name}Entity> page = ${wordUtils.uncapitalize($entity.name)}Repository.findAll(predicate, pageRequest, entityGraph);
#else
        final org.springframework.data.domain.Page<${entity.name}Entity> page = ${wordUtils.uncapitalize($entity.name)}Repository.findAll(predicate, pageRequest);
#end

        return pageMapper.of(page, ${wordUtils.uncapitalize($entity.name)}Mapper::of);
    }

    private String sanitizeOrderBy(final String orderBy) {
        if (StringUtils.isBlank(orderBy) || StringUtils.equalsIgnoreCase(orderBy, "UNSORTED")) {
#if ( $domainStrings.size() > 0 )
            return "${domainStrings.get(0).name}:asc";
#elseif ( $domainEnumerators.size() > 0 )
            return "${domainEnumerators.get(0).fieldName}:asc";
#elseif ( $domainBooleans.size() > 0 )
            return "${domainBooleans.get(0).name}:asc";
#elseif ( $domainTimestamps.size() > 0 )
            return "${domainDates.get(0).name}:asc";
#elseif ( $domainTimestamps.size() > 0 )
            return "${domainDates.get(0).name}:asc";
#elseif ( $domainKeys.size() > 0 )
            return "${domainKeys.get(0)}:asc";
#end
        }
        return StringUtils.stripToEmpty(orderBy);
    }
}
