#parse ( "include/loader_stringutils.vm" )
#parse ( "/include/domain_info.vm" )
package ${ROOT_PKG}.core.${entity.name.toLowerCase()}.usecase.impl;

import java.util.Optional;

import javax.inject.Named;

import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.domain.${entity.name};
import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.gateway.Get${entity.name}By${domainId}Gateway;
import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.usecase.Get${entity.name}By${domainId}UseCase;
import ${ROOT_PKG}.core.exception.InvalidParameterException;
import ${ROOT_PKG}.core.exception.NotFoundException;
import lombok.RequiredArgsConstructor;

/*
 * A Use Case follows these steps:
 * - Takes input
 * - Validates business rules
 * - Manipulates the model state
 * - Returns output
 */

#include ( "/include/author.vm" )

@Named
@RequiredArgsConstructor
public class Get${entity.name}By${domainId}UseCaseImpl implements Get${entity.name}By${domainId}UseCase {

    private final Get${entity.name}By${domainId}Gateway get${entity.name}By${domainId}Gateway;

    @Override
    public ${entity.name} execute(final Long ${uncapitalizedDomainId}) {

        if (${uncapitalizedDomainId} == null) {
#set ( $fieldNameLowerCaseWithDot = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($domainId), ".").toLowerCase() )
            throw new InvalidParameterException("validation.${entityNameLowerCaseWithDot}.${fieldNameLowerCaseWithDot}.null");
        }

        final Optional<${entity.name}> optional = get${entity.name}By${domainId}Gateway.execute(${uncapitalizedDomainId});
        return optional.orElseThrow(() -> new NotFoundException("validation.${entityNameLowerCaseWithDot}.${fieldNameLowerCaseWithDot}.notfound", String.valueOf(${uncapitalizedDomainId})));
    }
}
