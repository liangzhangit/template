#parse ( "/include/domain_info.vm" )
package ${ROOT_PKG}.core.${entity.name.toLowerCase()}.usecase.impl;

import java.util.List;

import javax.inject.Named;

import org.apache.commons.collections.CollectionUtils;

import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.domain.${entity.name};
import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.gateway.Find${pluralEntityName}By${pluralDomainId}Gateway;
import ${ROOT_PKG}.core.${entity.name.toLowerCase()}.usecase.Find${pluralEntityName}By${pluralDomainId}UseCase;
import ${ROOT_PKG}.core.common.paging.Page;
import ${ROOT_PKG}.core.exception.InvalidParameterException;
import lombok.RequiredArgsConstructor;

/*
 * A Use Case follows these steps:
 * - Takes input
 * - Validates business rules
 * - Manipulates the model state
 * - Returns output
 */

#include ( "/include/author.vm" )

@Named
@RequiredArgsConstructor
public class Find${pluralEntityName}By${pluralDomainId}UseCaseImpl implements Find${pluralEntityName}By${pluralDomainId}UseCase {

    private final Find${pluralEntityName}By${pluralDomainId}Gateway find${pluralEntityName}By${pluralDomainId}Gateway;

    @Override
    public Page<${entity.name}> execute(final List<Long> ${uncapitalizePluralDomainId}) {

        if (CollectionUtils.isEmpty(${uncapitalizePluralDomainId})) {
#set ( $domainIdsLowerCaseWithDot = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($uncapitalizePluralDomainId), ".").toLowerCase() )
            throw new InvalidParameterException("validation.${entityNameLowerCaseWithDot}.${domainIdsLowerCaseWithDot}.null");
        }

        if (${uncapitalizePluralDomainId}.size() > 1000) {
#set ( $domainIdsLowerCaseWithDot = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($uncapitalizePluralDomainId), ".").toLowerCase() )
            throw new InvalidParameterException("validation.get.by.${domainIdsLowerCaseWithDot}.limit");
        }

        return find${pluralEntityName}By${pluralDomainId}Gateway.execute(${uncapitalizePluralDomainId});
    }
}
