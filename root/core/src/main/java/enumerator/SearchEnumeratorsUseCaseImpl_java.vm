package ${ROOT_PKG}.core.enumerator.usecase.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import javax.inject.Named;

import org.apache.commons.lang3.StringUtils;

#foreach( $element in $model.allEntites )
#foreach( $field in $element.selectedLinks )
#if ( $field.fieldType.contains("Enum_") )
#set ( $enumerator = $field.fieldType.replace("Enum_", "") )
import ${ROOT_PKG}.core.${element.name.toLowerCase()}.domain.${enumerator};
#end
#end
#end
import ${ROOT_PKG}.core.enumerator.domain.Enumerator;
import ${ROOT_PKG}.core.enumerator.usecase.SearchEnumeratorsUseCase;
import ${ROOT_PKG}.core.enumerator.usecase.parameter.SearchEnumeratorsParameters;
import lombok.RequiredArgsConstructor;

/*
 * A Use Case follows these steps:
 * - Takes input
 * - Validates business rules
 * - Manipulates the model state
 * - Returns output
 */

#include ( "/include/author.vm" )

@Named
@RequiredArgsConstructor
public class SearchEnumeratorsUseCaseImpl implements SearchEnumeratorsUseCase {

    @Override
    public List<Enumerator> execute(final SearchEnumeratorsParameters parameters) {
        final Predicate<? super Enumerator> filter = enumerator -> compare(enumerator, parameters.getDomain(), parameters.getKey());
        return getAllEnumerators().stream().filter(filter).collect(Collectors.toList());
    }

    private boolean compare(final Enumerator enumerator, final String domain, final String key) {
        final boolean domainNotProvidedOrSameDomain = StringUtils.isBlank(domain) || enumerator.getDomain().equalsIgnoreCase(domain);
        final boolean keyNotProvidedOrSameKey = StringUtils.isBlank(key) || enumerator.getKey().equalsIgnoreCase(key);
        return domainNotProvidedOrSameDomain && keyNotProvidedOrSameKey;
    }

#set ( $enumerators = [] )
#foreach( $entity in $model.allEntites )
#if ( $entity.name.contains("Enum_") )
#set ( $enumerator = $entity.name.replace("Enum_", "") )
#set ( $x = $enumerators.add($enumerator) )
#end
#end
    private List<Enumerator> getAllEnumerators() {
        final List<Enumerator> enumerators = new ArrayList<>(0);
#foreach( $enumerator in $enumerators )
        enumerators.addAll(Arrays.asList(${enumerator}.values()).stream().map(this::buildEnumerator).collect(Collectors.toList()));
#end
        return enumerators;
    }
#foreach( $enumerator in $enumerators )

    private Enumerator buildEnumerator(final $enumerator enumerator) {
        return new Enumerator("$enumerator", enumerator.name(), enumerator.getMessageKey());
    }
#end
}