#parse ( "/include/domain_info.vm" )
#set ( $prefix = $strUtils.substringBefore($target.file, "Response") )
#set ( $package = $strUtils.substringBetween($target.folder, "entrypoint/rest/", "/domain") )
package ${ROOT_PKG}.entrypoint.rest.${package}.domain.response;

import java.io.Serializable;
#if ( $domainDecimals.size() > 0 )
import java.math.BigDecimal;
#end
#if ( $domainDates.size() > 0 )
import java.time.LocalDate;
#end
#if ( $domainTimestamps.size() > 0 )
import java.time.LocalDateTime;
#end

import lombok.AllArgsConstructor;
import lombok.Getter;

#include ( "/include/author.vm" )

@Getter
@AllArgsConstructor
public class ${prefix}Response implements Serializable {

#parse ( "/include/serial_version.vm" )

    private final Long ${uncapitalizedDomainId};
#foreach( $field in $domainLinksToOne )
#set ( $fieldName = $wordUtils.capitalize($field.fieldName) )
    private final ${prefix}${fieldName}Response $field.fieldName;$generator.generate($field.targetEntity.name, "${prefix}${fieldName}Response.java", $target.folder, "root/entrypoints/rest/src/main/java/response/Response_java.vm" )
#end
#foreach( $field in $domainLongs )
    private final Long $field.name;
#end
#foreach( $field in $domainStrings )
    private final String $field.name;
#end
#foreach( $field in $domainEnumerators )
#if ( $field.isCardinalityManyToOne() || $field.isCardinalityOneToMany() )
    private final String $field.fieldName;
#end
#end
#foreach( $field in $domainBooleans )
    private final Boolean $field.name;
#end
#foreach( $field in $domainDates )
    private final LocalDate $field.name;
#end
#foreach( $field in $domainTimestamps )
    private final LocalDateTime $field.name;
#end
#foreach( $field in $domainDecimals )
    private final BigDecimal $field.name;
#end
}
