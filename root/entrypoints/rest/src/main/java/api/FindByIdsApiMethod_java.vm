#parse ( "/include/domain_info.vm" )
package ${ROOT_PKG}.entrypoint.rest.${entity.name.toLowerCase()}.api;

import ${ROOT_PKG}.entrypoint.rest.${entity.name.toLowerCase()}.domain.request.Find${pluralEntityName}By${pluralDomainId}Request;
import ${ROOT_PKG}.entrypoint.rest.${entity.name.toLowerCase()}.domain.response.Find${pluralEntityName}By${pluralDomainId}WrapperResponse;
import ${ROOT_PKG}.entrypoint.rest.common.HttpStatusConstants;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

#include ( "/include/author.vm" )

@Tag(name = "${pluralEntityName}")
@FunctionalInterface
public interface Find${pluralEntityName}By${pluralDomainId}ApiMethod {

    @Operation(operationId = "find${pluralEntityName}By${pluralDomainId}", summary = "Find ${pluralEntityName} by ${pluralDomainId}")

    @Parameter(name = "Accept-Language",
               example = "pt_BR",
               in = ParameterIn.HEADER,
               description = "Represents a specific geographical, political, or cultural region. Language & Country.")

    @ApiResponses(value = {@ApiResponse(responseCode = HttpStatusConstants.OK_200, description = HttpStatusConstants.OK_200_MESSAGE),
                           @ApiResponse(responseCode = HttpStatusConstants.BAD_REQUEST_400, description = HttpStatusConstants.BAD_REQUEST_400_MESSAGE),
                           @ApiResponse(responseCode = HttpStatusConstants.UNAUTHORIZED_401, description = HttpStatusConstants.UNAUTHORIZED_401_MESSAGE),
                           @ApiResponse(responseCode = HttpStatusConstants.FORBIDDEN_403, description = HttpStatusConstants.FORBIDDEN_403_MESSAGE),
                           @ApiResponse(responseCode = HttpStatusConstants.NOT_FOUND_404, description = HttpStatusConstants.NOT_FOUND_404_MESSAGE),
                           @ApiResponse(responseCode = HttpStatusConstants.INTERNAL_SERVER_ERROR_500,
                                        description = HttpStatusConstants.INTERNAL_SERVER_ERROR_500_MESSAGE),})

    Find${pluralEntityName}By${pluralDomainId}WrapperResponse execute(final Find${pluralEntityName}By${pluralDomainId}Request request);
}
