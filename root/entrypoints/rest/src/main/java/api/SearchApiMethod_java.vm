#parse ( "/include/domain_info.vm" )
package ${ROOT_PKG}.entrypoint.rest.${entity.name.toLowerCase()}.api;

import org.springdoc.core.converters.models.PageableAsQueryParam;
import org.springframework.data.domain.Pageable;

import ${ROOT_PKG}.entrypoint.rest.${entity.name.toLowerCase()}.domain.request.Search${pluralEntityName}Request;
import ${ROOT_PKG}.entrypoint.rest.${entity.name.toLowerCase()}.domain.response.Search${pluralEntityName}WrapperResponse;
import ${ROOT_PKG}.entrypoint.rest.common.HttpStatusConstants;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

#include ( "/include/author.vm" )

@Tag(name = "${pluralEntityName}")
@FunctionalInterface
public interface Search${pluralEntityName}ApiMethod {

    @Operation(operationId = "search${pluralEntityName}", summary = "Search ${pluralEntityName}")

    @Parameter(name = "Accept-Language",
               example = "pt_BR",
               in = ParameterIn.HEADER,
               description = "Represents a specific geographical, political, or cultural region. Language & Country.")

    @PageableAsQueryParam

#macro( printEntityFields $parameters )
#set ( $entitie = $parameters.param1 )
#set ( $prefix = $parameters.param2 )
#set ( $uncapitalizedEntityName = $wordUtils.uncapitalize($entitie.name) ) 
#set ( $entitieId = $entitie.keyAttributes.get(0).name )  
#set ( $uncapitalizedEntitieId = $wordUtils.uncapitalize($entitieId) )
    @Parameter(in = ParameterIn.QUERY,
               name = "${prefix}${uncapitalizedEntitieId}",
               description = "${entitie.name} ${uncapitalizedEntitieId} that need to be considered for filter.",
               content = @Content(schema = @Schema(type = "long")))
#foreach( $link in $entitie.selectedLinks )
#if ( $link.fieldType.contains("Enum_") )
#set ( $capitalizeFieldName =  $wordUtils.capitalize(${link.fieldName}) )
#set ( $lowerCaseFieldNameSplitted = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($link.fieldName), " ").toLowerCase() )
    @Parameter(in = ParameterIn.QUERY,
               name = "${prefix}${link.fieldName}",
               description = "${entitie.name} ${lowerCaseFieldNameSplitted} that need to be considered for filter.",
               content = @Content(schema = @Schema(type = "string")))
#end
#end
#set ( $entitieAttributes = $entitie.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
#foreach( $field in $entitieAttributes )
#set ( $capitalizeFieldName =  $wordUtils.capitalize(${field.name}) )
#set ( $lowerCaseFieldNameSplitted = $strUtils.join($strUtils.splitByCharacterTypeCamelCase($field.name), " ").toLowerCase() )
#if ( $field.isLongType() )
    @Parameter(in = ParameterIn.QUERY,
               name = "${prefix}start${capitalizeFieldName}",
               description = "Filters ${uncapitalizedEntityName}'s ${lowerCaseFieldNameSplitted} greater than or equal to the specified value.",
               content = @Content(schema = @Schema(type = "long")))
    @Parameter(in = ParameterIn.QUERY,
               name = "${prefix}end${capitalizeFieldName}",
               description = "Filters ${uncapitalizedEntityName}'s ${lowerCaseFieldNameSplitted} less than or equal to the specified value.",
               content = @Content(schema = @Schema(type = "long")))
#elseif ( $field.isStringType() )
    @Parameter(in = ParameterIn.QUERY,
               name = "${prefix}${field.name}",
               description = "${entitie.name} ${lowerCaseFieldNameSplitted} that need to be considered for filter.",
               content = @Content(schema = @Schema(type = "string")))
#elseif ( $field.isBooleanType() )
    @Parameter(in = ParameterIn.QUERY,
               name = "${prefix}${field.name}",
               description = "If TRUE, retrieve only the ${lowerCaseFieldNameSplitted} ${pluralEntityName}; if FALSE, the opposite.",
               content = @Content(schema = @Schema(type = "boolean")))
#elseif ( $field.isDateType() )
    @Parameter(in = ParameterIn.QUERY,
               name = "${prefix}start${capitalizeFieldName}",
               description = "Filters ${uncapitalizedEntityName}'s ${lowerCaseFieldNameSplitted} after the specified date. Format: YYYY-MM-DD",
               content = @Content(schema = @Schema(type = "string")))
    @Parameter(in = ParameterIn.QUERY,
               name = "${prefix}end${capitalizeFieldName}",
               description = "Filters ${uncapitalizedEntityName}'s ${lowerCaseFieldNameSplitted} before the specified date. Format: YYYY-MM-DD",
               content = @Content(schema = @Schema(type = "string")))
#elseif ( $field.isTimestampType() )
    @Parameter(in = ParameterIn.QUERY,
               name = "${prefix}start${capitalizeFieldName}",
               description = "Filters ${uncapitalizedEntityName}'s ${lowerCaseFieldNameSplitted} after the specified datetime. Format: ISO DATETIME",
               content = @Content(schema = @Schema(type = "string")))
    @Parameter(in = ParameterIn.QUERY,
               name = "${prefix}end${capitalizeFieldName}",
               description = "Filters ${uncapitalizedEntityName}'s ${lowerCaseFieldNameSplitted} before the specified datetime. Format: ISO DATETIME",
               content = @Content(schema = @Schema(type = "string")))
#end
#end
#foreach( $link in $entitie.selectedLinks )
#if ( !$link.fieldType.contains("Enum_") )
#set( $params = {"param1": $link.targetEntity, "param2": "${link.fieldName}."} )
#printEntityFields($params)
#end
#end
#end
#set( $params = {"param1": $entity, "param2": ""} )
#printEntityFields($params)

    @ApiResponses(value = {@ApiResponse(responseCode = HttpStatusConstants.OK_200, description = HttpStatusConstants.OK_200_MESSAGE),
                           @ApiResponse(responseCode = HttpStatusConstants.BAD_REQUEST_400, description = HttpStatusConstants.BAD_REQUEST_400_MESSAGE),
                           @ApiResponse(responseCode = HttpStatusConstants.UNAUTHORIZED_401, description = HttpStatusConstants.UNAUTHORIZED_401_MESSAGE),
                           @ApiResponse(responseCode = HttpStatusConstants.FORBIDDEN_403, description = HttpStatusConstants.FORBIDDEN_403_MESSAGE),
                           @ApiResponse(responseCode = HttpStatusConstants.NOT_FOUND_404, description = HttpStatusConstants.NOT_FOUND_404_MESSAGE),
                           @ApiResponse(responseCode = HttpStatusConstants.INTERNAL_SERVER_ERROR_500,
                                         description = HttpStatusConstants.INTERNAL_SERVER_ERROR_500_MESSAGE),})

    Search${pluralEntityName}WrapperResponse execute(@Parameter(hidden = true) final Pageable pageable, @Parameter(hidden = true) final Search${pluralEntityName}Request request);
}
