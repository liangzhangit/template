#parse ( "include/loader_stringutils.vm" )
package ${ROOT_PKG}.archunit;

import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;
import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.tngtech.archunit.junit.AnalyzeClasses;
import com.tngtech.archunit.junit.ArchTest;
import com.tngtech.archunit.lang.ArchRule;

#set ( $appName = $strUtils.capitalize( ${MAVEN_ARTIFACT_ID} ) ) 
import ${ROOT_PKG}.${appName}Application;

#include ( "/include/author.vm" )

@AnalyzeClasses(packagesOf = ${appName}Application.class)
public class MethodsTest {

    @ArchTest
    static ArchRule all_public_methods_in_the_controller_layer_should_return_ResponseStatus = methods().that()
                                                                                                       .areDeclaredInClassesThat()
                                                                                                       .resideInAPackage("..controller..")
                                                                                                       .and()
                                                                                                       .arePublic()
                                                                                                       .should()
                                                                                                       .beAnnotatedWith(ResponseStatus.class);

    @ArchTest
    static ArchRule code_units_in_DataProvider_layer_should_be_Transactional = classes().that()
                                                                                        .resideInAPackage("..dataprovider")
                                                                                        .should()
                                                                                        .beAnnotatedWith(Transactional.class);
}
